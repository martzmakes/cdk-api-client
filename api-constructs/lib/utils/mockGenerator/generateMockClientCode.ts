import { EndpointMock } from "../../interfaces/EndpointMock";
import { TypeImport } from "../../interfaces/TypeImport";

/**
 * Generates the mock client code based on endpoint information
 */
export function generateMockClientCode({
  endpoints,
  imports,
  titleCaseProjectName,
}: {
  endpoints: EndpointMock[];
  imports: TypeImport[];
  titleCaseProjectName: string;
}): string {
  // Collect unique return types to import
  const returnTypes = new Set<string>();
  const typeToImportMap = new Map<string, string>();

  // Map type names to their import paths
  imports.forEach((imp) => {
    typeToImportMap.set(imp.typeName, imp.importPath);
  });

  // Collect return types
  endpoints.forEach((endpoint) => {
    const returnType = endpoint.returnType;
    if (returnType !== "any" && returnType !== "void") {
      returnTypes.add(returnType);
    }
  });

  // Group imports by path
  const importsByPath = new Map<string, Set<string>>();

  // Add ApiClient import
  importsByPath.set(
    "./apiClient",
    new Set([`${titleCaseProjectName}ApiClient`])
  );

  // Add other type imports
  returnTypes.forEach((type) => {
    // Extract type name - handling generics by taking the base type
    const baseType = type.split("<")[0].trim();

    if (typeToImportMap.has(baseType)) {
      const importPath = typeToImportMap.get(baseType)!;
      if (!importsByPath.has(importPath)) {
        importsByPath.set(importPath, new Set());
      }
      importsByPath.get(importPath)!.add(baseType);
    }
  });

  let mockCode = `
/**
 * Auto-generated API client mock for Jest testing
 * Do not edit this file directly
 */
`;

  // Generate import statements
  importsByPath.forEach((types, path) => {
    mockCode += `import { ${Array.from(types).join(", ")} } from '${path}';\n`;
  });

  mockCode += `
/**
 * Type for mock implementation of each endpoint
 */
export type MockImplementation<T> = jest.Mock<Promise<T>, [any]>;

/**
 * ApiClientMock class with Jest mock implementations for each endpoint
 */
export class ${titleCaseProjectName}ApiClientMock implements Partial<${titleCaseProjectName}ApiClient> {
`;

  // Generate mock properties for each endpoint
  endpoints.forEach((endpoint) => {
    mockCode += `  ${endpoint.name}: MockImplementation<${endpoint.returnType}> = jest.fn();\n`;
  });

  // Add reset method
  mockCode += `
  /**
   * Resets all mock implementations
   */
  resetMocks(): void {
`;

  endpoints.forEach((endpoint) => {
    mockCode += `    this.${endpoint.name}.mockReset();\n`;
  });

  mockCode += `  }

  /**
   * Clears all mocks
   */
  clearMocks(): void {
`;

  endpoints.forEach((endpoint) => {
    mockCode += `    this.${endpoint.name}.mockClear();\n`;
  });

  mockCode += `  }
}

/**
 * Creates an instance of the API client mock
 */
export function createApi${titleCaseProjectName}ClientMock(): ${titleCaseProjectName}ApiClientMock {
  return new ${titleCaseProjectName}ApiClientMock();
}
`;

  return mockCode;
}
